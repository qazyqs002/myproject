"""
lambda匿名函数
语法如下：

lambda [arg1[, arg2, ... argN]]: expression
参数是可选的，如果使用的参数话，参数通常也是表达式的一部分
不同之处：
    lambda可以定义一个匿名函数，而def定义的函数必须有一个名字。
    这应该是lambda与def两者最大的区别。
为什么使用lambda
1、lambda函数主要用来写一些小体量的一次性函数，避免污染环境，
    同时也能简化代码。
2、lambda起到了一种函数速写的作用，允许在使用的代码内嵌入一个函数的定义。
    他们完全是可选的（你总是能够使用def来替代它们），但是你仅需要嵌入小段可
    执行代码的情况下它们会带来一个更简洁的代码结构
3、lambda使用可以加参数也可以不加参数
4、lambda通常用来编写跳转表（jump table），也就是行为的列表或字典，
    能够按照需要执行相应的动作。如下段代码所示。
"""
"""示例一、"""
# 第一行是lambda声明，x,y相当于传入的参数，
# 整个函数会返回x+y的值。lambda作为一个表达式，
# 定义了一个匿名函数，上例的代码x，y为入口参数，x+y为函数体。
# 在这里lambda简化了函数定义的书写形式。
tes = lambda x,y:x+y
print(tes(2, 3))
print(tes("sss", "ddd"))
"""示例二、无参数的lambda函数 """
res = lambda : "2"
print(res())

"""
总结：
1、lambda只是一个表达式，函数体比def简单很多
2、lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去
3、lambda函数拥有自己的名字空间，且不能访问自有参数列表之外或全局名字空间里的参数
4、 简单单行代码或者一次性的函数可以用lambda函数来书写，可以让代码更简洁。
5、 对于复杂函数或者函数体体量大的函数，最好不要用lambda函数，会增加代码的阅读难度，使代码晦涩难懂。
6、 在非多次调用的函数的情况下，lambda表达式即用既得，提高性能
"""